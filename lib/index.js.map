{"version":3,"sources":["../src/index.js"],"names":["getAllBlendNames","Object","keys","blendModeCodes","shaderObjects","reduce","processed","name","formatted","frag","assign","shaders","Shaders","create","ColorBlending","createComponent","tex","children","color","blendMode","displayName","propTypes","any","isRequired","array","string"],"mappings":";;;;;;QAEgBA,gB,GAAAA,gB;;AAFhB;;;;AAQA;;;;AACA;;;;AACA;;;;;;;;AARO,SAASA,gBAAT,GAA4B;AACjC,SAAOC,OAAOC,IAAP,mBAAP;AACD;;AAEM,IAAMC,2DAAN;;AAOP,IAAMC,gBAAgBJ,mBAAmBK,MAAnB,CAA0B,UAACC,SAAD,EAAYC,IAAZ,EAAqB;AACnE,MAAMC,gCACHD,IADG,EACI;AACNE,4GAOJ,kBAAYF,IAAZ,CAPI,sFAWcA,IAXd;AADM,GADJ,CAAN;AAkBA,SAAON,OAAOS,MAAP,CAAc,EAAd,EAAkBJ,SAAlB,EAA6BE,SAA7B,CAAP;AACD,CApBqB,EAoBnB,EApBmB,CAAtB;;AAsBA,IAAMG,UAAU,kBAAGC,OAAH,CAAWC,MAAX,CAAkBT,aAAlB,CAAhB;;AAEA,IAAMU,gBAAgB,kBAAGC,eAAH,CAAmB;AAAA,MAAaC,GAAb,QAAGC,QAAH;AAAA,MAAkBC,KAAlB,QAAkBA,KAAlB;AAAA,4BAAyBC,SAAzB;AAAA,MAAyBA,SAAzB,kCAAqC,UAArC;AAAA,SACvC,gDAAI,IAAJ;AACE,YAASR,QAAQQ,SAAR,CADX;AAEE,cAAU,EAAEH,QAAF,EAAOE,YAAP;AAFZ,IADuC;AAAA,CAAnB,EAKnB;AACDE,eAAa,eADZ;AAEDC,aAAW;AACTJ,cAAU,oBAAUK,GAAV,CAAcC,UADf;AAETL,WAAO,oBAAUM,KAFR;AAGTL,eAAW,oBAAUM;AAHZ;AAFV,CALmB,CAAtB;;kBAceX,a","file":"index.js","sourcesContent":["import shaderCodes from './shaders'\n\nexport function getAllBlendNames() {\n  return Object.keys(shaderCodes);\n}\n\nexport const blendModeCodes = shaderCodes;\n\nimport GL from 'gl-react';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst shaderObjects = getAllBlendNames().reduce((processed, name) => {\n  const formatted = {\n    [name]: {\n      frag: `\nprecision highp float;\nvarying vec2 uv;\n\nuniform sampler2D tex;\nuniform vec4 color;\n\n${shaderCodes[name]}\n\nvoid main () {\n  vec4 baseColor = texture2D(tex, uv);\n  vec3 newColor = ${name}(baseColor.rgb, color.rgb, color.a);\n  gl_FragColor = vec4(newColor, 1.);\n}`\n    }\n  };\n  return Object.assign({}, processed, formatted);\n}, {});\n\nconst shaders = GL.Shaders.create(shaderObjects);\n\nconst ColorBlending = GL.createComponent(({ children: tex, color, blendMode = 'blendAdd' }) => (\n  <GL.Node\n    shader={ shaders[blendMode] }\n    uniforms={{ tex, color }}\n  />\n), {\n  displayName: \"ColorBlending\",\n  propTypes: {\n    children: PropTypes.any.isRequired,\n    color: PropTypes.array,\n    blendMode: PropTypes.string,\n  }\n});\n\nexport default ColorBlending;"]}